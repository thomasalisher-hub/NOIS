# handlers/start.py
from typing import Tuple
from aiogram.exceptions import TelegramBadRequest
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from db.models import db
from utils.nick_generator import generate_nickname, generate_multiple_nicks
from utils.avatars import get_user_avatar, regenerate_user_avatar, generate_color
import os

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥
dp = Router()

# –ö–µ—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—É—Ç–µ–π –∫ –∞–≤–∞—Ç–∞—Ä–∫–∞–º (—á—Ç–æ–±—ã –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–π —Å–µ—Å—Å–∏–∏)
avatar_cache = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM (Finite State Machine)
class NicknameStates(StatesGroup):
    waiting_for_nickname = State()

def get_cached_avatar_path(nickname: str, size: int = 512) -> Tuple[str, str]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∞–≤–∞—Ç–∞—Ä–∫—É –∏–∑ –∫–µ—à–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç.
    """
    cache_key = f"{nickname}_{size}"

    if cache_key in avatar_cache:
        return avatar_cache[cache_key]

    # –ü–æ–ª—É—á–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É (–±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ –≤–∑—è—Ç–∞ –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –∫–µ—à–∞)
    avatar_path, color = get_user_avatar(nickname, size)
    avatar_cache[cache_key] = (avatar_path, color)

    return avatar_path, color

async def send_avatar_message(message: types.Message, nickname: str, text: str, size: int = 512):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–≤–∞—Ç–∞—Ä–∫–æ–π.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏—à–Ω–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É –∏–∑ –∫–µ—à–∞
        avatar_path, color = get_cached_avatar_path(nickname, size)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if os.path.exists(avatar_path):
            photo = FSInputFile(avatar_path)
            await message.answer_photo(
                photo=photo,
                caption=text
            )
        else:
            # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await message.answer(text)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏: {e}")
        # Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        await message.answer(text)

@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –≤—ã–±–æ—Ä–æ–º —Å–ø–æ—Å–æ–±–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞"""
    user_id = message.from_user.id
    first_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    existing_user = await db.get_user(user_id)

    if existing_user:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        welcome_text = f"""
üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {first_name}!

–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π –∞–Ω–æ–Ω–∏–º–Ω—ã–π –Ω–∏–∫: <b>{existing_user['nickname']}</b>
–¶–≤–µ—Ç —Ç–≤–æ–µ–≥–æ –Ω–∏–∫–∞: {existing_user['color_hex']}

–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:
/profile - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
/avatar - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é –∞–≤–∞—Ç–∞—Ä–∫—É
/random_nick - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –Ω–∏–∫
/nick_options - –í—ã–±—Ä–∞—Ç—å –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∫–æ–≤
/nick - –°–º–µ–Ω–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º –≤—Ä—É—á–Ω—É—é
        """

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–≤–∞—Ç–∞—Ä–∫–æ–π (–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)
        await send_avatar_message(
            message,
            existing_user['nickname'],
            welcome_text,
            size=512
        )

    else:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä
        welcome_text = f"""
üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NOIS, {first_name}!

NOIS - —ç—Ç–æ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏. 
–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏, –∫–∞–∫ —Ö–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –∞–Ω–æ–Ω–∏–º–Ω—ã–π –Ω–∏–∫:

1. üé≤ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</b> - —Å–∏—Å—Ç–µ–º–∞ —Å–∞–º–∞ –ø—Ä–∏–¥—É–º–∞–µ—Ç –∫—Ä—É—Ç–æ–π –Ω–∏–∫
2. ‚úèÔ∏è <b>–í—Ä—É—á–Ω—É—é</b> - –ø—Ä–∏–¥—É–º–∞–π –Ω–∏–∫ —Å–∞–º

–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∂–µ üëá
        """

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üé≤ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –Ω–∏–∫",
                    callback_data="auto_nick"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚úèÔ∏è –í—ã–±—Ä–∞—Ç—å –Ω–∏–∫ –≤—Ä—É—á–Ω—É—é",
                    callback_data="manual_nick"
                )
            ]
        ])

        await message.answer(welcome_text, reply_markup=keyboard)


@dp.callback_query(lambda c: c.data == "auto_nick")
async def process_auto_nick(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∏–∫–∞"""
    try:
        user_id = callback.from_user.id
        first_name = callback.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º
        new_nickname = generate_nickname()
        new_color = generate_color()

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
        user = await db.create_user(user_id, new_nickname, new_color)

        welcome_text = f"""
üé≤ <b>–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!</b>

–°–∏—Å—Ç–µ–º–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∞ –¥–ª—è —Ç–µ–±—è –∞–Ω–æ–Ω–∏–º–Ω—ã–π –Ω–∏–∫:
<b>{new_nickname}</b>

‚ú® <b>–ß—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç:</b>
‚Ä¢ –¢–≤–æ–π –Ω–∏–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–Ω–æ–Ω–∏–º–µ–Ω
‚Ä¢ –¶–≤–µ—Ç –Ω–∏–∫–∞ —É–Ω–∏–∫–∞–ª–µ–Ω –∏ –ø–æ—Å—Ç–æ—è–Ω–µ–Ω
‚Ä¢ –ú–æ–∂–µ—à—å —Å–º–µ–Ω–∏—Ç—å –Ω–∏–∫ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç

üöÄ <b>–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞—á–∞–ª–∞:</b>
/rooms - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—É–±–ª–∏—á–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
/create - –°–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –∫–æ–º–Ω–∞—Ç—É
/random_nick - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π —Å–ª—É—á–∞–π–Ω—ã–π –Ω–∏–∫
/nick_options - –í—ã–±—Ä–∞—Ç—å –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∫–æ–≤

–¢–≤–æ–π —Ü–≤–µ—Ç: {new_color}
        """

        await callback.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await send_avatar_message(callback.message, new_nickname, welcome_text, 512)
        await callback.answer()

    except TelegramBadRequest as e:
        if "query is too old" in str(e):
            # –ï—Å–ª–∏ callback —É—Å—Ç–∞—Ä–µ–ª, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.answer("‚ùå –í—Ä–µ–º—è –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–µ–∫–ª–æ. –ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
        else:
            raise e
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ process_auto_nick: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")


@dp.callback_query(lambda c: c.data == "manual_nick")
async def process_manual_nick(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–∏–∫–∞"""
    try:
        instruction_text = """
‚úèÔ∏è <b>–í—ã–±—Ä–∞–Ω —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –Ω–∏–∫–∞</b>

–ü—Ä–∏–¥—É–º–∞–π —Å–µ–±–µ –∞–Ω–æ–Ω–∏–º–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º –∏ –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.

üí° <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –Ω–∏–∫—É:</b>
‚Ä¢ –û—Ç 3 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –ú–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å—ã, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
‚Ä¢ –ë—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —á–∞—Ç–∞—Ö

üìù <b>–ü—Ä–∏–º–µ—Ä—ã —Ö–æ—Ä–æ—à–∏—Ö –Ω–∏–∫–æ–≤:</b>
‚Ä¢ ShadowRunner
‚Ä¢ CosmicTraveler
‚Ä¢ TechWizard
‚Ä¢ MysticDreamer
‚Ä¢ QuantumExplorer

üéØ <b>–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º:</b>
        """

        await callback.message.edit_text(instruction_text)
        await state.set_state(NicknameStates.waiting_for_nickname)
        await callback.answer()

    except TelegramBadRequest as e:
        if "query is too old" in str(e):
            await callback.message.answer("‚ùå –í—Ä–µ–º—è –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–µ–∫–ª–æ. –ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
        else:
            raise e
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ process_manual_nick: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")


@dp.callback_query(lambda c: c.data.startswith("select_nick_"))
async def process_nick_selection(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∏–∫–∞ –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"""
    try:
        user_id = callback.from_user.id
        selected_nick = callback.data.replace("select_nick_", "")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user = await db.get_user(user_id)
        if not user:
            await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start", show_alert=True)
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∏–∫–Ω–µ–π–º
        success = await db.update_user_nickname(user_id, selected_nick)

        if success:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É
            try:
                avatar_path, color = regenerate_user_avatar(selected_nick, size=512)
                cache_key = f"{selected_nick}_512"
                avatar_cache[cache_key] = (avatar_path, color)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∫–∏: {e}")

            await callback.message.edit_text(
                f"‚úÖ <b>–ù–∏–∫–Ω–µ–π–º –∏–∑–º–µ–Ω–µ–Ω!</b>\n\n"
                f"–°—Ç–∞—Ä—ã–π –Ω–∏–∫: <b>{user['nickname']}</b>\n"
                f"–ù–æ–≤—ã–π –Ω–∏–∫: <b>{selected_nick}</b>\n\n"
                f"üí° –ê–≤–∞—Ç–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.\n"
                f"üé® –ò—Å–ø–æ–ª—å–∑—É–π /profile —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è."
            )

        else:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∏–∫–Ω–µ–π–º–∞")

        await callback.answer()

    except TelegramBadRequest as e:
        if "query is too old" in str(e):
            # –ù–µ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏–π callback
            pass
        else:
            raise e
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ process_nick_selection: {e}")
        try:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –Ω–∏–∫–∞", show_alert=True)
        except:
            pass


@dp.callback_query(lambda c: c.data == "more_nicks")
async def process_more_nicks(callback: types.CallbackQuery):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∫–æ–≤"""
    try:
        nicks = generate_multiple_nicks(5)

        nicks_text = "üé≤ <b>–ù–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∏–∫–æ–≤</b>\n\n"
        nicks_text += "–í—ã–±–µ—Ä–∏ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è –≤–∞—Ä–∏–∞–Ω—Ç:\n\n"

        for i, nick in enumerate(nicks, 1):
            nicks_text += f"{i}. <code>{nick}</code>\n"

        nicks_text += "\nüí° –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –ø–æ–¥ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–º—Å—è –Ω–∏–∫–æ–º"

        keyboard = InlineKeyboardMarkup(inline_keyboard=[])

        for i, nick in enumerate(nicks, 1):
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(
                    text=f"üéØ –í—ã–±—Ä–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç {i}",
                    callback_data=f"select_nick_{nick}"
                )
            ])

        keyboard.inline_keyboard.append([
            InlineKeyboardButton(text="üé≤ –ï—â–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã", callback_data="more_nicks")
        ])

        await callback.message.edit_text(nicks_text, reply_markup=keyboard)
        await callback.answer()

    except TelegramBadRequest as e:
        if "query is too old" in str(e):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ callback'–∏
            pass
        else:
            raise e
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ process_more_nicks: {e}")
        try:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∏–∫–æ–≤", show_alert=True)
        except:
            pass

@dp.message(Command("profile"))
async def cmd_profile(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∞–≤–∞—Ç–∞—Ä–∫—É)"""
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = await db.get_user(user_id)
    if not user:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
        return

    profile_text = f"""
üë§ <b>–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å NOIS</b>

üìõ –ù–∏–∫–Ω–µ–π–º: <b>{user['nickname']}</b>
üé® –¶–≤–µ—Ç: {user['color_hex']}
üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user['created_at'].strftime('%d.%m.%Y %H:%M')}

üí° <b>–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–º–µ–Ω—ã –Ω–∏–∫–∞:</b>
/random_nick - –°–ª—É—á–∞–π–Ω—ã–π –Ω–∏–∫
/nick_options - –í—ã–±—Ä–∞—Ç—å –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
/nick - –°–º–µ–Ω–∏—Ç—å –≤—Ä—É—á–Ω—É—é

üöÄ <b>–ö–æ–º–Ω–∞—Ç—ã:</b>
/rooms - –°–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç
/myrooms - –ú–æ–∏ –∫–æ–º–Ω–∞—Ç—ã
/create - –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É
        """

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å –ö–ï–®–ò–†–û–í–ê–ù–ù–û–ô –∞–≤–∞—Ç–∞—Ä–∫–æ–π (–Ω–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º)
    await send_avatar_message(
        message,
        user['nickname'],
        profile_text,
        size=512
    )

@dp.message(Command("avatar"))
async def cmd_avatar(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–π –∞–≤–∞—Ç–∞—Ä–∫–∏"""
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = await db.get_user(user_id)
    if not user:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
        return

    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É
    try:
        avatar_path, color = regenerate_user_avatar(user['nickname'], size=512)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
        cache_key = f"{user['nickname']}_512"
        avatar_cache[cache_key] = (avatar_path, color)

        if os.path.exists(avatar_path):
            photo = FSInputFile(avatar_path)
            await message.answer_photo(
                photo=photo,
                caption=f"üé® –ù–æ–≤–∞—è –∞–≤–∞—Ç–∞—Ä–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n–ù–∏–∫: <b>{user['nickname']}</b>\n–¶–≤–µ—Ç: {user['color_hex']}"
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏")

@dp.message(Command("nick"))
async def cmd_nick(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /nick –¥–ª—è —Å–º–µ–Ω—ã –Ω–∏–∫–Ω–µ–π–º–∞"""
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = await db.get_user(user_id)
    if not user:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
        return

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –Ω–∏–∫ –∏–∑ –∫–æ–º–∞–Ω–¥—ã (/nick –ù–æ–≤—ã–π–ù–∏–∫)
    args = message.text.split()
    if len(args) < 2:
        await message.answer("‚ùå –£–∫–∞–∂–∏ –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º: /nick —Ç–≤–æ–π_–Ω–∏–∫")
        return

    new_nickname = args[1].strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –Ω–∏–∫–∞
    if len(new_nickname) < 3 or len(new_nickname) > 20:
        await message.answer("‚ùå –ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 3 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∏–∫–Ω–µ–π–º –≤ –±–∞–∑–µ
    success = await db.update_user_nickname(user_id, new_nickname)

    if success:
        # –ü—Ä–∏ —Å–º–µ–Ω–µ –Ω–∏–∫–∞ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∞–≤–∞—Ç–∞—Ä–∫—É
        try:
            avatar_path, color = regenerate_user_avatar(new_nickname, size=512)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à –¥–ª—è –Ω–æ–≤–æ–≥–æ –Ω–∏–∫–∞
            cache_key = f"{new_nickname}_512"
            avatar_cache[cache_key] = (avatar_path, color)

            if os.path.exists(avatar_path):
                photo = FSInputFile(avatar_path)
                await message.answer_photo(
                    photo=photo,
                    caption=f"‚úÖ –ù–∏–∫–Ω–µ–π–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: <b>{new_nickname}</b>\n–¶–≤–µ—Ç –æ—Å—Ç–∞–ª—Å—è –ø—Ä–µ–∂–Ω–∏–º: {user['color_hex']}"
                )
            else:
                await message.answer(f"‚úÖ –ù–∏–∫–Ω–µ–π–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: <b>{new_nickname}</b>")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∫–∏: {e}")
            await message.answer(f"‚úÖ –ù–∏–∫–Ω–µ–π–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: <b>{new_nickname}</b>")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∏–∫–Ω–µ–π–º–∞")

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
    help_text = """
üÜò <b>–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º NOIS</b>

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/profile - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å (–∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–≤–∞—Ç–∞—Ä–∫–∞)

üé≤ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∏–∫–æ–º:</b>
/random_nick - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –Ω–∏–∫
/nick_options - –í—ã–±—Ä–∞—Ç—å –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∫–æ–≤
/nick - –°–º–µ–Ω–∏—Ç—å –Ω–∏–∫ –≤—Ä—É—á–Ω—É—é
/avatar - –ù–æ–≤–∞—è –∞–≤–∞—Ç–∞—Ä–∫–∞

üè† <b>–ö–æ–º–Ω–∞—Ç—ã:</b>
/rooms - –°–ø–∏—Å–æ–∫ –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç
/myrooms - –ú–æ–∏ –∫–æ–º–Ω–∞—Ç—ã
/create - –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É
/join - –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ

üí° <b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –ü—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∞–≤—Ç–æ/—Ä—É—á–Ω–æ–π –Ω–∏–∫
‚Ä¢ –ï—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
‚Ä¢ –ê–≤–∞—Ç–∞—Ä–∫–∏ –∫–µ—à–∏—Ä—É—é—Ç—Å—è –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
‚Ä¢ –¶–≤–µ—Ç–∞ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –Ω–∏–∫–Ω–µ–π–º–∞
        """

    await message.answer(help_text)

@dp.message(Command("test"))
async def cmd_test(message: types.Message):
    """–ü—Ä–æ—Å—Ç–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –±–µ–∑ —Ñ–æ—Ç–æ"""
    await message.answer("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –ö–æ–º–∞–Ω–¥–∞ /test –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")

# –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
@dp.startup()
async def on_startup():
    """–û—á–∏—â–∞–µ–º –∫–µ—à –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    avatar_cache.clear()
    print("‚úÖ –ö–µ—à –∞–≤–∞—Ç–∞—Ä–æ–∫ –æ—á–∏—â–µ–Ω")