# handlers/rooms.py
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from db.models import db
import re

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∫–æ–º–Ω–∞—Ç
dp = Router()


@dp.message(Command("create"))
async def cmd_create(message: types.Message):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã"""
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = await db.get_user(user_id)
    if not user:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
        return

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("""
‚ùå –£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã:

–ü—Ä–∏–º–µ—Ä:
<code>/create –ú–æ–π —á–∞—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è</code>
<code>/create –ò–≥—Ä—ã –≤–µ—á–µ—Ä–æ–º</code>
<code>/create –û–±—Å—É–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤</code>

–ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.
        """)
        return

    room_name = args[1].strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è
    if len(room_name) > 100:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 100 —Å–∏–º–≤–æ–ª–æ–≤")
        return

    if len(room_name) < 3:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 3 —Å–∏–º–≤–æ–ª–æ–≤")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        room = await db.create_room(
            name=room_name,
            created_by=user_id,
            is_public=True,
            max_participants=50
        )

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –≤ –∫–æ–º–Ω–∞—Ç—É
        await db.add_user_to_room(user_id, room['room_id'])

        await message.answer(f"""
‚úÖ <b>–ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>

üè† <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {room_name}
üÜî <b>ID –∫–æ–º–Ω–∞—Ç—ã:</b> <code>{room['room_id']}</code>
üë• <b>–ú–∞–∫—Å–∏–º—É–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b> {room['max_participants']}
üåê <b>–°—Ç–∞—Ç—É—Å:</b> –ü—É–±–ª–∏—á–Ω–∞—è

üí° <b>–ß—Ç–æ –¥–∞–ª—å—à–µ:</b>
1. –ü–æ–¥–µ–ª–∏—Å—å ID –∫–æ–º–Ω–∞—Ç—ã —Å –¥—Ä—É–∑—å—è–º–∏: <code>{room['room_id']}</code>
2. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É: <code>/join {room['room_id']}</code>
3. –°–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç: /rooms

üöÄ –ö–æ–º–Ω–∞—Ç–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!
        """)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")


@dp.message(Command("join"))
async def cmd_join(message: types.Message):
    """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ"""
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = await db.get_user(user_id)
    if not user:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
        return

    # –ü–æ–ª—É—á–∞–µ–º ID –∫–æ–º–Ω–∞—Ç—ã –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()
    if len(args) < 2:
        await message.answer("""
‚ùå –£–∫–∞–∂–∏ ID –∫–æ–º–Ω–∞—Ç—ã:

–ü—Ä–∏–º–µ—Ä:
<code>/join 123</code>
<code>/join 456</code>

üí° ID –∫–æ–º–Ω–∞—Ç—ã –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —É –¥—Ä—É–≥–∞ –∏–ª–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç: /rooms
        """)
        return

    # –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å ID –∫–æ–º–Ω–∞—Ç—ã
    try:
        room_id = int(args[1])
    except ValueError:
        await message.answer("‚ùå ID –∫–æ–º–Ω–∞—Ç—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
    room = await db.get_room(room_id)
    if not room:
        await message.answer("‚ùå –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å ID.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
    if await db.is_user_in_room(user_id, room_id):
        await message.answer(f"‚ùå –¢—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ –∫–æ–º–Ω–∞—Ç–µ \"{room['name']}\"")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–Ω–∞—Ç—É
    success = await db.add_user_to_room(user_id, room_id)

    if success:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        participants = await db.get_room_participants(room_id)

        await message.answer(f"""
‚úÖ <b>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ!</b>

üè† <b>–ö–æ–º–Ω–∞—Ç–∞:</b> {room['name']}
üÜî <b>ID:</b> <code>{room_id}</code>
üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b> {len(participants)}/{room['max_participants']}
üë§ <b>–°–æ–∑–¥–∞—Ç–µ–ª—å:</b> {room['creator_nickname']}

üéâ –¢–µ–ø–µ—Ä—å —Ç—ã —É—á–∞—Å—Ç–Ω–∏–∫ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç—ã!
üí° –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /myrooms —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ –∫–æ–º–Ω–∞—Ç—ã.
        """)
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞.")


@dp.message(Command("rooms"))
async def cmd_rooms(message: types.Message):
    """–°–ø–∏—Å–æ–∫ –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç"""
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = await db.get_user(user_id)
    if not user:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç
    rooms = await db.get_public_rooms(limit=10)

    if not rooms:
        await message.answer("""
üè† <b>–ü—É–±–ª–∏—á–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã</b>

üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç.

üí° –¢—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –∫–æ–º–Ω–∞—Ç—É:
<code>/create –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–≤–æ–µ–π –∫–æ–º–Ω–∞—Ç—ã</code>

–ò–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ –ø–æ ID.
        """)
        return

    rooms_text = "üè† <b>–ü—É–±–ª–∏—á–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã</b>\n\n"

    for i, room in enumerate(rooms, 1):
        participant_count = room.get('participant_count', 0)
        rooms_text += f"{i}. <b>{room['name']}</b>\n"
        rooms_text += f"   üÜî ID: <code>{room['room_id']}</code>\n"
        rooms_text += f"   üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participant_count}/{room['max_participants']}\n"
        rooms_text += f"   üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å: {room['creator_nickname']}\n"
        rooms_text += f"   üìÖ –°–æ–∑–¥–∞–Ω–∞: {room['created_at'].strftime('%d.%m.%Y')}\n\n"

    rooms_text += "üí° <b>–ß—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è:</b>\n"
    rooms_text += "<code>/join ID_–∫–æ–º–Ω–∞—Ç—ã</code>\n\n"
    rooms_text += "üîß <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç–∞–º–∏:</b>\n"
    rooms_text += "/myrooms - –ú–æ–∏ –∫–æ–º–Ω–∞—Ç—ã\n"
    rooms_text += "/create - –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É"

    await message.answer(rooms_text)


@dp.message(Command("myrooms"))
async def cmd_myrooms(message: types.Message):
    """–°–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = await db.get_user(user_id)
    if not user:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    rooms = await db.get_user_rooms(user_id)

    if not rooms:
        await message.answer("""
üè† <b>–ú–æ–∏ –∫–æ–º–Ω–∞—Ç—ã</b>

üì≠ –¢—ã –ø–æ–∫–∞ –Ω–µ —Å–æ—Å—Ç–æ–∏—à—å –Ω–∏ –≤ –æ–¥–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ.

üí° –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–º–Ω–∞—Ç–∞–º:
<code>/rooms</code> - –°–ø–∏—Å–æ–∫ –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç
<code>/join ID</code> - –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –ø–æ ID

–ò–ª–∏ —Å–æ–∑–¥–∞–π —Å–≤–æ—é –∫–æ–º–Ω–∞—Ç—É:
<code>/create –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã</code>
        """)
        return

    rooms_text = f"üè† <b>–ú–æ–∏ –∫–æ–º–Ω–∞—Ç—ã</b> ({len(rooms)})\n\n"

    for i, room in enumerate(rooms, 1):
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–Ω–∞—Ç—ã
        participants = await db.get_room_participants(room['room_id'])

        rooms_text += f"{i}. <b>{room['name']}</b>\n"
        rooms_text += f"   üÜî ID: <code>{room['room_id']}</code>\n"
        rooms_text += f"   üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants)}/{room['max_participants']}\n"
        rooms_text += f"   üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å: {room['creator_nickname']}\n"
        rooms_text += f"   üåê –°—Ç–∞—Ç—É—Å: {'–ü—É–±–ª–∏—á–Ω–∞—è' if room['is_public'] else '–ü—Ä–∏–≤–∞—Ç–Ω–∞—è'}\n\n"

    rooms_text += "üí° <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
    rooms_text += "/rooms - –í—Å–µ –ø—É–±–ª–∏—á–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã\n"
    rooms_text += "/create - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É\n"
    rooms_text += "/join ID - –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ"

    await message.answer(rooms_text)


@dp.message(Command("leave"))
async def cmd_leave(message: types.Message):
    """–í—ã—Ö–æ–¥ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã"""
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = await db.get_user(user_id)
    if not user:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
        return

    # –ü–æ–ª—É—á–∞–µ–º ID –∫–æ–º–Ω–∞—Ç—ã –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()
    if len(args) < 2:
        # –ï—Å–ª–∏ ID –Ω–µ —É–∫–∞–∑–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç –¥–ª—è –≤—ã—Ö–æ–¥–∞
        rooms = await db.get_user_rooms(user_id)

        if not rooms:
            await message.answer("‚ùå –¢—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—à—å –Ω–∏ –≤ –æ–¥–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ")
            return

        rooms_text = "üö™ <b>–í—ã—Ö–æ–¥ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã</b>\n\n"
        rooms_text += "–í—ã–±–µ—Ä–∏ –∫–æ–º–Ω–∞—Ç—É –¥–ª—è –≤—ã—Ö–æ–¥–∞:\n\n"

        for i, room in enumerate(rooms, 1):
            rooms_text += f"{i}. <b>{room['name']}</b> (ID: <code>{room['room_id']}</code>)\n"

        rooms_text += "\nüí° –ò—Å–ø–æ–ª—å–∑—É–π: <code>/leave ID_–∫–æ–º–Ω–∞—Ç—ã</code>"
        await message.answer(rooms_text)
        return

    # –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å ID –∫–æ–º–Ω–∞—Ç—ã
    try:
        room_id = int(args[1])
    except ValueError:
        await message.answer("‚ùå ID –∫–æ–º–Ω–∞—Ç—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–æ–º–Ω–∞—Ç–µ
    if not await db.is_user_in_room(user_id, room_id):
        await message.answer("‚ùå –¢—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ
    room = await db.get_room(room_id)
    if not room:
        await message.answer("‚ùå –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    # –í—ã—Ö–æ–¥–∏–º –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
    success = await db.remove_user_from_room(user_id, room_id)

    if success:
        await message.answer(f"""
üö™ <b>–í—ã—à–µ–ª –∏–∑ –∫–æ–º–Ω–∞—Ç—ã</b>

üè† –ö–æ–º–Ω–∞—Ç–∞: <b>{room['name']}</b>
üÜî ID: <code>{room_id}</code>

‚úÖ –¢—ã –±–æ–ª—å—à–µ –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç—ã.
        """)
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã")