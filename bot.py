# bot.py - –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–ï–†–ï–î–ê–ß–ò –ë–î
import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import ErrorEvent
from aiogram.filters import ExceptionTypeFilter
from dotenv import load_dotenv
import os
import sys
import asyncpg

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()


# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
class Config:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    BOT_TOKEN = os.getenv('BOT_TOKEN')
    DB_URL = os.getenv('DB_URL')

    @classmethod
    def validate(cls):
        if not cls.BOT_TOKEN:
            raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        if not cls.DB_URL:
            raise ValueError("DB_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        return cls


# --- –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–Ø ---
def setup_logging():
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - [%(filename)s:%(lineno)d] - %(message)s',
        handlers=[
            logging.StreamHandler(sys.stdout),
            logging.FileHandler('bot.log', encoding='utf-8')
        ]
    )
    return logging.getLogger(__name__)


logger = setup_logging()

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê ---
try:
    config = Config.validate()
    bot = Bot(
        token=config.BOT_TOKEN,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )
    dp = Dispatcher()
except ValueError as e:
    logger.critical(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    sys.exit(1)
except Exception as e:
    logger.critical(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
    sys.exit(1)


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–®–ò–ë–û–ö ---
async def database_error_handler(event: ErrorEvent):
    logger.error(f"–û—à–∏–±–∫–∞ –ë–î: {event.exception}", exc_info=True)
    if event.update.message:
        await event.update.message.answer("üîß –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.")


async def validation_error_handler(event: ErrorEvent):
    logger.warning(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {event.exception}")
    if event.update.message:
        await event.update.message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


async def general_error_handler(event: ErrorEvent):
    logger.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {event.exception}", exc_info=True)
    if event.update.message:
        await event.update.message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω.")


# --- –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø ROUTERS –° –ü–ï–†–ï–î–ê–ß–ï–ô –ë–î ---
async def register_handlers(db_instance):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è routers —Å –ø–µ—Ä–µ–¥–∞—á–µ–π —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ë–î"""
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º routers
        from handlers.start import dp as start_router
        from handlers.rooms import dp as rooms_router
        from handlers.messages import dp as messages_router
        from handlers.webapp import dp as webapp_router

        # –ü–µ—Ä–µ–¥–∞–µ–º –ë–î –≤ –∫–∞–∂–¥—ã–π router —á–µ—Ä–µ–∑ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        dp['db'] = db_instance

        # –í–∫–ª—é—á–∞–µ–º routers
        dp.include_router(start_router)
        dp.include_router(rooms_router)
        dp.include_router(messages_router)
        dp.include_router(webapp_router)

        logger.info("‚úÖ –í—Å–µ routers –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –ë–î")

    except ImportError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ routers: {e}")
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ routers: {e}")
        raise


# --- –ù–ê–°–¢–†–û–ô–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–• ---
async def setup_database():
    try:
        from db.models import Database
        db = Database()
        await db.connect()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
        return db
    except Exception as e:
        logger.critical(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        raise


# --- –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ---
async def main():
    db = None
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db = await setup_database()

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
        dp.error.register(database_error_handler, ExceptionTypeFilter(asyncpg.PostgresError))
        dp.error.register(validation_error_handler, ExceptionTypeFilter(ValueError))
        dp.error.register(general_error_handler)

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º routers —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –ë–î
        await register_handlers(db)

        logger.info("üéØ –ë–æ—Ç NOIS –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        bot_info = await bot.get_me()
        logger.info(f"ü§ñ ID –±–æ—Ç–∞: {bot_info.id}")
        logger.info(f"üë§ Username –±–æ—Ç–∞: @{bot_info.username}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º polling
        await dp.start_polling(bot, skip_updates=True)

    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.critical(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main(): {e}", exc_info=True)
        raise
    finally:
        logger.info("üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        if db:
            await db.disconnect()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∞")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    except Exception as e:
        logger.critical(f"üíÄ –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        sys.exit(1)