# services/chat_manager.py
from aiogram import Bot
from aiogram.types import ChatPermissions
from db.models import db
import logging

logger = logging.getLogger(__name__)


class ChatManager:
    """–£–ø—Ä–∞–≤–ª—è–µ—Ç Telegram —á–∞—Ç–∞–º–∏ –¥–ª—è –∫–æ–º–Ω–∞—Ç"""

    def __init__(self, bot: Bot):
        self.bot = bot

    async def create_room_chat(self, room_id: int, room_name: str) -> int:
        """
        –°–æ–∑–¥–∞–µ—Ç Telegram —á–∞—Ç –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã
        Returns: ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
        """
        try:
            # –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–≥–ª—É—à–∫–∞ - –±—É–¥–µ–º —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å –ø–æ–∑–∂–µ
            logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã {room_id}: {room_name}")

            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            fake_chat_id = room_id + 1000000000  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —á–∞—Ç–∞ –≤ –±–∞–∑–µ
            await db.update_room_telegram_id(room_id, fake_chat_id)

            logger.info(f"–°–æ–∑–¥–∞–Ω –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —á–∞—Ç –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã {room_id}: {fake_chat_id}")
            return fake_chat_id

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã {room_id}: {e}")
            raise

    async def add_user_to_chat(self, chat_id: int, user_id: int) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç –∫–æ–º–Ω–∞—Ç—ã (–∑–∞–≥–ª—É—à–∫–∞)"""
        try:
            logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —á–∞—Ç {chat_id}")

            # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
            await self.bot.send_message(
                chat_id=user_id,
                text=f"üéâ –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É –∫–æ–º–Ω–∞—Ç—ã!\n\nID —á–∞—Ç–∞: {chat_id}"
            )

            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —á–∞—Ç {chat_id}: {e}")
            return False

    async def send_message_to_room(self, chat_id: int, user_nickname: str,
                                   user_color: str, message_text: str) -> int:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –∫–æ–º–Ω–∞—Ç—ã —Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º
        Returns: ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        try:
            # –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            formatted_message = f"üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–º–Ω–∞—Ç—É (ID: {chat_id})</b>\n\n"
            formatted_message += f"<b><font color='{user_color}'>{user_nickname}</font></b>: {message_text}"

            message = await self.bot.send_message(
                chat_id=user_id,  # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                text=formatted_message,
                parse_mode='HTML'
            )

            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_nickname} –≤ —á–∞—Ç {chat_id}")
            return message.message_id

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")
            # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                message = await self.bot.send_message(
                    chat_id=user_id,
                    text=f"üí¨ <b>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b> {message_text}",
                    parse_mode='HTML'
                )
                return message.message_id
            except:
                raise

    async def pin_webapp_message(self, chat_id: int, webapp_text: str) -> int:
        """–ó–∞–∫—Ä–µ–ø–ª—è–µ—Ç WebApp —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ (–∑–∞–≥–ª—É—à–∫–∞)"""
        try:
            logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ WebApp –≤ —á–∞—Ç–µ {chat_id}")
            return 1
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è WebApp —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ {chat_id}: {e}")
            return 0